import telebot
from telebot import types
import os
from bot_manager import BotManager
import logging

# ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржмржЯ ржЯрзЛржХрзЗржи рж▓рзЛржб ржХрж░рж╛
API_TOKEN = os.getenv("API_TOKEN")
bot = telebot.TeleBot(API_TOKEN)
manager = BotManager()

# рж▓ржЧрж┐ржВ рж╕рзЗржЯржЖржк
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ржмржЯ ржЪрж╛рж▓рзБ ржХрж░рж╛рж░ ржЬржирзНржп рж╕рзНржЯрж╛рж░рзНржЯ ржХржорж╛ржирзНржб
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('ЁЯЪА Deploy Bot', 'ЁЯЫС Stop Bot')
    markup.row('ЁЯУЛ List Bots', 'тЪЩя╕П Configure Bot')
    markup.row('ЁЯФН Status Check', 'ЁЯТм Help', 'тД╣я╕П About')

    bot.send_message(
        message.chat.id,
        "рж╕рзНржмрж╛ржЧрждржо! ЁЯШК\n\nржПржЗ ржмржЯрзЗрж░ ржорж╛ржзрзНржпржорзЗ ржЖржкржирж┐ ржирждрзБржи ржмржЯ ржбрж┐ржкрзНрж▓ржпрж╝ ржПржмржВ ржкрж░рж┐ржЪрж╛рж▓ржирж╛ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред",
        reply_markup=markup
    )

# ржирждрзБржи ржмржЯ ржбрж┐ржкрзНрж▓ржпрж╝ ржХрж░рж╛рж░ ржЬржирзНржп ржХржорж╛ржирзНржб
@bot.message_handler(regexp="ЁЯЪА Deploy Bot")
def deploy_bot_command(message):
    msg = bot.send_message(
        message.chat.id,
        "ржирждрзБржи ржмржЯрзЗрж░ ржирж╛ржо ржПржмржВ ржнрж╛рж╖рж╛ рж▓рж┐ржЦрзБржи (python/nodejs) ржЙржжрж╛рж╣рж░ржг: `bot_name python`"
    )
    bot.register_next_step_handler(msg, deploy_bot)

def deploy_bot(message):
    try:
        bot_name, language = message.text.split()
        port = manager.deploy_bot(bot_name, language)
        bot.send_message(
            message.chat.id,
            f"ЁЯОЙ {bot_name} ржмржЯржЯрж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ ржбрж┐ржкрзНрж▓ржпрж╝ рж╣ржпрж╝рзЗржЫрзЗ! тЬЕ\nЁЯУН ржкрзЛрж░рзНржЯ: {port}"
        )
    except Exception as e:
        bot.send_message(message.chat.id, f"тЪая╕П рждрзНрж░рзБржЯрж┐: {e}")

# ржмржЯ ржмржирзНржз ржХрж░рж╛рж░ ржЬржирзНржп ржХржорж╛ржирзНржб
@bot.message_handler(regexp="ЁЯЫС Stop Bot")
def stop_bot_command(message):
    msg = bot.send_message(message.chat.id, "ржпрзЗ ржмржЯржЯрж┐ ржмржирзНржз ржХрж░рждрзЗ ржЪрж╛ржи рждрж╛рж░ ржирж╛ржо рж▓рж┐ржЦрзБржи:")
    bot.register_next_step_handler(msg, stop_bot)

def stop_bot(message):
    bot_name = message.text
    if manager.stop_bot(bot_name):
        bot.send_message(message.chat.id, f"ЁЯЫС {bot_name} ржмржЯржЯрж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ ржмржирзНржз рж╣ржпрж╝рзЗржЫрзЗ!")
    else:
        bot.send_message(message.chat.id, f"тЪая╕П {bot_name} ржмржЯржЯрж┐ ржЪрж╛рж▓рзБ ржЫрж┐рж▓ ржирж╛ред")

# ржЪрж╛рж▓рзБ ржерж╛ржХрж╛ ржмржЯ рждрж╛рж▓рж┐ржХрж╛ ржжрзЗржЦрж╛рж░ ржЬржирзНржп ржХржорж╛ржирзНржб
@bot.message_handler(regexp="ЁЯУЛ List Bots")
def list_bots(message):
    bots = manager.list_bots()
    if bots:
        bot_list = "\n".join([f"ЁЯЯв {b['name']} - ржкрзЛрж░рзНржЯ: {b['port']}" for b in bots])
        bot.send_message(message.chat.id, f"ржЪрж╛рж▓рзБ ржерж╛ржХрж╛ ржмржЯ:\n\n{bot_list}")
    else:
        bot.send_message(message.chat.id, "тЪая╕П ржмрж░рзНрждржорж╛ржирзЗ ржХрзЛржирзЛ ржмржЯ ржЪрж╛рж▓рзБ ржирзЗржЗред")

# рж╕рж╣рж╛ржпрж╝рждрж╛
@bot.message_handler(regexp="ЁЯТм Help")
def help_section(message):
    help_text = (
        "ЁЯТб **рж╕рж╣рж╛ржпрж╝рждрж╛ ржорзЗржирзБ** ЁЯТб\n\n"
        "ЁЯЪА **Deploy Bot** - ржирждрзБржи ржПржХржЯрж┐ ржмржЯ рждрзИрж░рж┐ ржХрж░рзБржи\n"
        "ЁЯЫС **Stop Bot** - ржЪрж╛рж▓рзБ ржерж╛ржХрж╛ ржмржЯ ржмржирзНржз ржХрж░рзБржи\n"
        "ЁЯУЛ **List Bots** - рж╕ржм ржЪрж╛рж▓рзБ ржерж╛ржХрж╛ ржмржЯ рждрж╛рж▓рж┐ржХрж╛ ржжрзЗржЦрзБржи\n"
    )
    bot.send_message(message.chat.id, help_text)

# рж╕ржорзНржкрж░рзНржХрзЗ рждржерзНржп
@bot.message_handler(regexp="тД╣я╕П About")
def about_bot(message):
    about_text = (
        "тД╣я╕П **ржмржЯ ржорзНржпрж╛ржирзЗржЬрж╛рж░ рж╕ржорзНржкрж░рзНржХрзЗ** тД╣я╕П\n\n"
        "ржПржЗ ржмржЯржЯрж┐ ржкрж░рж┐ржЪрж╛рж▓ржирж╛ ржХрж░рждрзЗ ржПржмржВ ржирждрзБржи ржмржЯ рждрзИрж░рж┐ ржХрж░рждрзЗ рж╕рж╣рж╛ржпрж╝ржХред"
    )
    bot.send_message(message.chat.id, about_text)

bot.polling()
